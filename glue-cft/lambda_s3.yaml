AWSTemplateFormatVersion: 2010-09-09
Description: Working with custom resources and S3

Parameters:
  S3BucketName:
    Type: String
    Description: "S3 bucket to create."
    Default: "av-dmro-glue"
  AWSLambdaExecutionRoleArn:
    Type: String
    Default: "arn:aws:iam::978671394047:role/av-dmro-cloudformation"
  DirsToCreate:
    Description: "Comma delimited list of directories to create."
    Type: CommaDelimitedList
Resources:
  SampleS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
  AWSLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Work with S3 Buckets!"
      FunctionName: !Sub '${AWS::StackName}-${AWS::Region}-lambda'
      Handler: index.handler
      Role: !Ref AWSLambdaExecutionRoleArn
      Timeout: 360
      Runtime: python3.6
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          def lambda_handler(event, context):
            # Init ...
            the_event = event['RequestType']
            print("The event is: ", str(the_event))
            response_data = {}
            s_3 = boto3.client('s3')
            # Retrieve parameters
            #the_bucket = event['ResourceProperties']['the_bucket']
            the_bucket = av-dmro-glue
            #dirs_to_create = event['ResourceProperties']['dirs_to_create']
            try:
              if the_event in ('Create', 'Update'):
                print("Requested folders: ", str(dirs_to_create))
                      
                #s3 = boto3.resource('s3')
                s_3.upload_file('/tmp/hello.txt', 'mybucket', 'hello.txt')
                #for dir_name in dirs_to_create:
                  print("Creating: ", str(dir_name))
                  s_3.upload_file(Bucket=the_bucket,
                    Key=(dir_name
                    + '/'))
                  #elif the_event == 'Delete':
                  #    print("Deleting S3 content...")
                  #    b_operator = boto3.resource('s3')
                  #    b_operator.Bucket(str(the_bucket)).objects.all().delete()
                  # Everything OK... send the signal back
                  print("Operation successful!")
                  cfnresponse.send(event,
                    context,
                    cfnresponse.SUCCESS,
                    response_data)
              except Exception as e:
                print("Operation failed...")
                print(str(e))
                response_data['Data'] = str(e)
                cfnresponse.send(event,
                  context,
                    cfnresponse.FAILED,
                    response_data)
  