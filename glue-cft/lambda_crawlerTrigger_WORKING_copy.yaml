AWSTemplateFormatVersion: 2010-09-09
Description: Working with custom resources and S3

Parameters:
  pRole:
    Type: String
    Default: av-dmro-glue-service-role
    Description: "IAM role that is used for Glue Job"
  pDatabaseName:
    Type: String
    Default: av-dmro-sap-aurora-1
    Description: "Database used for clue catelog"

  ps3scriptpath:
    Type: String
    Default: "s3://av-dmro-glue-458793/samplescript.py"
    Description: "script location of glue-job script file"
  pCfnRoleArn:
    Type: String
    Default: arn:aws:iam::978671394047:role/av-dmro-cloudformation
    Description: "Role ARN to create Glue Crawler"
  JDBCConnection:
    Type: String 
    Default: av-dmro-sap-test-1
    Description: "Connection name used for sap database"
  JDBCPath:
    Type: String
    Default: dmro_materials_dev/public/gea_onhand_materials_hana
    Description: "Database path"
  S3BucketName:
    Type: String
    Description: "S3 bucket to create."
    Default: "av-dmro-glue52465872345"
  pGlueServiceRoleArn:
    Type: String
    Default: arn:aws:iam::978671394047:role/av-dmro-glue-service-role
  TableName:
    Type: String
    Description: The Data Catalog table representing the Parquet files being converted by the workflow.
    Default: av-dmro_products
  DatabaseName:
    Type: String
    Description: The AWS Glue Data Catalog database that is used to hold the tables created in this walkthrough.
    Default: av-dmro-event_driven_workflow_tutorial_b

Resources:
  rEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: "av-dmro-SAP-EventBus" # Required

  rEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "schedule"
      Name: !Sub "av-dmro-SAP-Ingestion-Schedule-Dev"
      ScheduleExpression: "rate(1 hour)"
      State: ENABLED
      Targets:
        -
          Arn: !Ref "rStatemachine"
          Id: "av-dmro-glue-stepfunction"
          RoleArn: arn:aws:iam::978671394047:role/av-dmro-glue-service-role
  

  #reventbuspolicy:
  #  Type: AWS::Events::EventBusPolicy
  #  Properties:
  #    EventBusName: !Ref rEventBus
  #    Statement: 
  #      Principal:
  #        AWS: "978671394047"
  #      Effect: "Allow"
  #      Action: "events:putevents"
  #      Resource: !GetAtt "reventBridgeRule.Arn"
  #    StatementId: "buspolicyid" 
  
  rEventBridgeLambdaTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      Name: av-dmro-Crawler-Trigger-Rule-Dev
      Description: "Event Rule to trigger Crawler"
      EventPattern:
        source:
          - "aws.glue"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "glue.amazonaws.com"
          eventName:
            - "CreateCrawler"
          requestParameters:
            name: 
              - av-dmro-SAP-DataCrawler-Dev
      State: "ENABLED"
      Targets:
        -
          Arn: 
            Fn::GetAtt:
              - "rCrawlerTriggerLambdaFunction"
              - "Arn"
          Id: "CrawlerTriggerLambdafunctionId"

  rLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref "rCrawlerTriggerLambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt:
          - "rEventBridgeLambdaTriggerRule"
          - "Arn"

  rCrawlerTriggerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "av-dmro-Crawler-Trigger-Dev"
      Handler: index.handler
      Runtime: python3.8
      Code: 
        ZipFile: |
          import json
          import boto3
          def handler(event, context):
                Datacrawler = "av-dmro-SAP-DataCrawler-Dev"
                MetaDatacrawler = "av-dmro-SAP-MetaDataCrawler-Dev"
                glueclient=boto3.client('glue')
                runid=glueclient.start_crawler(Name=Datacrawler)
                runid=glueclient.start_crawler(Name=MetaDatacrawler)
                return runid

      Description: Invoke a function to create a log stream.
      MemorySize: 128
      Timeout: 8
      Role: !Ref pGlueServiceRoleArn
      #VpcConfig:
      #  SecurityGroupIds:
      #    - sg-06de315977bc0d402
      #  SubnetIds:
      #    - subnet-04070f535a42ba6dd


  rGlueJob:
    Type: AWS::Glue::Job
    Properties:
      Command:
        Name: "glueetl"
        PythonVersion: "3"
        ScriptLocation: "ps3scriptpath"
      #Connections:
      #  Connections:
      #    -
      DefaultArguments: 
        "--additional-python-module": "pg800,pyarrow=2,answrangler"
      Description: "description for glue job"
      GlueVersion: 3.0
      MaxRetries: 0
      Name: av-dmro-SAP-Ingestion
      NumberOfWorkers: 5
      Role: !Ref "pGlueServiceRoleArn"
      Timeout: 10
      WorkerType: G.1X

  rDataCrawler:
    Type: AWS::Glue::Crawler
    DependsOn:
      - rEventBridgeLambdaTriggerRule
    Properties:
      Name: av-dmro-SAP-DataCrawler-Dev
      Description: Glue crawler which discovers source table schema
      DatabaseName: !Ref DatabaseName
      Role: arn:aws:iam::978671394047:role/av-dmro-glue-service-role
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: LOG
      Targets:
        CatalogTargets:
          - DatabaseName: !Ref DatabaseName
            Tables:
            - !Ref SourceTable
      Configuration: "{\"Version\":1.0,\"Grouping\":{\"TableGroupingPolicy\":\"CombineCompatibleSchemas\"}}"
  SourceTable:
    DependsOn: Database
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref DatabaseName
      TableInput:
        Name: !Sub 'source_${TableName}'
        Description: This AWS Glue Data Catalog table has metadata information about the source data.
        TableType: EXTERNAL_TABLE
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/data/products_raw/'
  rMetaDataCrawler:
    Type: AWS::Glue::Crawler
    DependsOn:
      - rEventBridgeLambdaTriggerRule
    Properties:
      Name: av-dmro-SAP-MetaDataCrawler-Dev
      Description: Glue crawler which discovers source table schema
      DatabaseName: !Ref DatabaseName
      Role: arn:aws:iam::978671394047:role/av-dmro-glue-service-role
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: LOG
      Targets:
        CatalogTargets:
          - DatabaseName: !Ref DatabaseName
            Tables:
            - !Ref SourceTable
      Configuration: "{\"Version\":1.0,\"Grouping\":{\"TableGroupingPolicy\":\"CombineCompatibleSchemas\"}}"
  SourceTable:
    DependsOn: Database
    Type: AWS::Glue::Table
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref DatabaseName
      TableInput:
        Name: !Sub 'source_${TableName}'
        Description: This AWS Glue Data Catalog table has metadata information about the source data.
        TableType: EXTERNAL_TABLE
        StorageDescriptor:
          Location: !Sub 's3://${S3BucketName}/data/products_raw/'
  Database:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Name: !Ref DatabaseName
        Description: This database is used to organize the metadata tables created in this tutorial.

  
  rSNSnotification:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "av-dmro-SNS-Notification-Dev"
      TopicName: "v-dmro-SNS-Notification-Dev"

  rsnsTopicpolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: snstopicpolicy
        Version: '2012-10-17'
        Statement:
          - Sid: snsTopicPermission
            Effect: Allow
            Principal:
              Service:
                - "states.amazonaws.com"
            Action:
              - SNS:Publish
            Resource: rSNSNotification
      Topics: # Required
        - !Ref rSNSnotification

  #SNSEmailSubscription:
  #  Type: AWS::SNS::Subscription
  #  Properties:
  #    TopicArn: !Ref "rSNSnotification"
  #    Protocol: email-json
  #    Endpoint: "lalit.sahu@ge.com"

  rStatemachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Ref pGlueServiceRoleArn
      StateMachineName: "av-dmro-Glue-Stepfunction-Dev"
      DefinitionString: |-
        {
          "StartAt": "Glue Job",
          "States":
            {
              "Glue Job":
                {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::glue:startJobRun.sync",
                  "Parameters": {
                    "JobName": "av-dmro-SAP-Ingestion-Dev"
                    },
                  "Next": "SNS Success"
                },
              "SNS Success": 
                {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sns:publish",
                  "Parameters": {
                    "TopicArn": "arn:aws:sns:us-east-1:978671394047:av-dmro-SNS-Notification-Dev",
                    "Message": "ingestion successful"
                    },
                  "End": true
                }
            }
        }
      #DefinitionSubstitutions:
      #LoggingConfiguration:
        #Destinations:
        #  - CloudWatchLogsLogGroup:
        #      LogGroupArn: !GetAtt rStateMachineLogGroup.Arn
        #IncludeExecutionData: true
        #Level: "ALL"
      StateMachineType: "STANDARD"
      TracingConfiguration:
        Enabled: false
  
  rStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/stepfunction/my-step-function
      RetentionInDays: 14